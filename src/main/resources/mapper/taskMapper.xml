<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">
<mapper namespace="me.jhchoi.ontrack.mapper.TaskMapper" >

    <insert id="newTask" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO ontrack_task(project_id, task_title, authorMid, authorName, task_priority, task_status, task_dueDate, task_parent_id, createdAt, updatedAt, updatedBy)
        VALUES (#{projectId}, #{taskTitle}, #{authorMid}, #{authorName}, #{taskPriority}, #{taskStatus}, #{taskDueDate}, #{taskParentId}, #{createdAt}, #{updatedAt}, #{updatedBy})
    </insert>

    <insert id="assign" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_assignment(project_id, task_id, member_id, nickname, role, assignedAt)
        VALUES
        <foreach collection="list" item="ta" separator=",">
            (#{ta.projectId}, #{ta.taskId}, #{ta.memberId}, #{ta.nickname}, #{ta.role}, #{ta.assignedAt})
        </foreach>
    </insert>

    <insert id="addComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_comment(project_id, task_id, author_mid, author_name, type, comment, createdAt, modifiedAt)
        VALUES (#{projectId}, #{taskId}, #{authorMid}, #{authorName}, #{type}, #{comment}, #{createdAt}, #{modifiedAt})
    </insert>

    <insert id="saveCheckComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO check_comment(commentary_id, member_id, checked)
        VALUES (#{commentId}, #{memberId}, #{checked})
    </insert>

    <insert id="attachFile" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_file(project_id, task_id, member_id, file_origName, file_newName, file_type, file_size, file_path, createdAt)
        VALUES
        <foreach collection="list" item="tf" separator=",">
            (#{tf.projectId}, #{tf.taskId}, #{tf.memberId}, #{tf.fileOrigName}, #{tf.fileNewName}, #{tf.fileType}, #{tf.fileSize}, #{tf.filePath}, #{tf.createdAt})
        </foreach>
    </insert>

    <insert id="log" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_history(project_id, task_id, modItem, modType, modContent, updatedAt, updatedBy)
        VALUES (#{projectId}, #{taskId}, #{modItem}, #{modType}, #{modContent}, #{updatedAt}, #{updatedBy})
    </insert>

    <select id="findByTaskId" resultType="OnTrackTask">
        SELECT project_id, task_title, authorMid, authorName, task_priority, task_status, task_dueDate, createdAt, updatedAt, updatedBy
        FROM ontrack_task
        WHERE id = #{id}
    </select>

    <select id="getAssigneeList" resultType="TaskAssignment">
        SELECT task_id, nickname, member_id
        FROM task_assignment
        WHERE task_id = #{taskId}
    </select>

    <select id="findTaskByMemberId" resultType="TaskList">
        SELECT t.id, t.task_title, t.task_status, t.task_dueDate
        FROM ontrack_task t
        INNER JOIN task_assignment ta
        ON ta.task_id = t.id
        WHERE member_id = #{memberId}
    </select>

    <select id="getAssigneeView" resultType="AssigneeTaskList">
        SELECT t.id, t.task_title, t.task_status, t.task_dueDate, count(task_id) assigneeNum
        FROM task_assignment ta
        INNER JOIN ontrack_task t
        ON ta.task_id = t.id
        WHERE ta.task_id in (SELECT task_id FROM task_assignment WHERE member_id = #{memberId})
        GROUP BY t.id
        ORDER BY t.task_status
    </select>

    <select id="getNoAssigneeTask" resultType="NoAssigneeTask">
        SELECT id, task_title, task_status, task_dueDate, authorMid, authorName, createdAt, task_priority
        FROM ontrack_task
        WHERE project_id = #{projectId}
        AND id NOT IN (SELECT task_id FROM task_assignment WHERE project_id = #{projectId})
    </select>

    <select id="getStatusView" parameterType="StatusViewRequest" resultType="StatusTaskList">
        SELECT t.id, t.task_title, t.authorMid, t.authorName, t.task_status, t.task_dueDate
        , GROUP_CONCAT(ta.member_id ORDER BY ta.member_id SEPARATOR ',') assigneeMid
        , GROUP_CONCAT(ta.nickname ORDER BY ta.member_id SEPARATOR ',') assigneeName
        FROM ontrack_task t
        LEFT OUTER JOIN task_assignment ta
        ON ta.task_id = t.id
        WHERE t.task_status = #{status}
        AND t.project_id = #{projectId}
        GROUP BY t.id
    </select>

    <select id="commentChkMember" parameterType="CheckComment" resultType="CheckComment">
        SELECT id, comment_id, member_id, checked
        FROM check_comment
        WHERE comment_id = #{commentId}
        <if test="memberId != null">
            AND member_id = #{memberId}
        </if>
    </select>

    <select id="getTaskComment" resultType="TaskComment">
        SELECT task_id, author_mid, author_name, type, comment, createdAt
        FROM task_comment
        WHERE task_id = #{taskId}
        ORDER BY createdAt DESC;
    </select>

    <update id="editTaskStatus" parameterType="TaskEditRequest">
        UPDATE ontrack_task
        SET task_status = #{status}
        , updatedAt = #{updatedAt}
        , updatedBy = #{updatedBy}
        WHERE id = #{taskId}
    </update>

    <delete id="delAssignee" parameterType="TaskAssignment">
        DELETE
        FROM task_assignment
        WHERE task_id = #{taskId}
        AND member_id = #{memberId}
    </delete>

    <select id="cntAssigneeByTaskId" parameterType="Long" resultType="Integer">
        SELECT count(task_id)
        FROM task_assignment
        WHERE task_id = #{taskId}
        GROUP BY task_id;
    </select>


    <select id="chkAssigned" parameterType="TaskAssignment" resultType="Long">
        SELECT task_id
        FROM task_assignment
        WHERE task_id = #{taskId}
        AND member_id = #{memberId}
    </select>
</mapper>