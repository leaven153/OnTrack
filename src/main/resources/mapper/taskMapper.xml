<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">
<mapper namespace="me.jhchoi.ontrack.mapper.TaskMapper" >

    <insert id="addTask" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO ontrack_task(project_id, task_title, author_mid, author_name, task_priority, task_status, task_dueDate, task_parent_id, createdAt, updatedAt, updatedBy)
        VALUES (#{projectId}, #{taskTitle}, #{authorMid}, #{authorName}, #{taskPriority}, #{taskStatus}, #{taskDueDate}, #{taskParentId}, #{createdAt}, #{updatedAt}, #{updatedBy})
    </insert>

    <insert id="assign" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_assignment(project_id, task_id, member_id, nickname, role, assignedAt)
        VALUES
        <foreach collection="list" item="ta" separator=",">
            (#{ta.projectId}, #{ta.taskId}, #{ta.memberId}, #{ta.nickname}, #{ta.role}, #{ta.assignedAt})
        </foreach>
    </insert>

    <insert id="addComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_comment(project_id, task_id, author_mid, author_name, type, comment, createdAt, modifiedAt)
        VALUES (#{projectId}, #{taskId}, #{authorMid}, #{authorName}, #{type}, #{comment}, #{createdAt}, #{modifiedAt})
    </insert>

    <insert id="registerCheckComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO check_comment(comment_id, member_id, checked, task_id, user_id)
        VALUES (#{commentId}, #{memberId}, #{checked}, #{taskId}, #{userId})
    </insert>

    <insert id="attachFile" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_file(project_id, task_id, member_id, file_origName, file_newName, file_type, file_size, file_path, createdAt)
        VALUES
        <foreach collection="list" item="tf" separator=",">
            (#{tf.projectId}, #{tf.taskId}, #{tf.memberId}, #{tf.fileOrigName}, #{tf.fileNewName}, #{tf.fileType}, #{tf.fileSize}, #{tf.filePath}, #{tf.createdAt})
        </foreach>
    </insert>

    <insert id="log" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task_history(project_id, task_id, modItem, modType, modContent, updatedAt, updatedBy)
        VALUES (#{projectId}, #{taskId}, #{modItem}, #{modType}, #{modContent}, #{updatedAt}, #{updatedBy})
    </insert>

    <select id="findByTaskId" resultType="OnTrackTask">
        SELECT project_id, task_title, author_mid, author_name, task_priority, task_status, task_dueDate, createdAt, updatedAt, updatedBy, task_parent_id, hasChild
        FROM ontrack_task
        WHERE id = #{id}
    </select>

    <select id="getAllRemovedTask" parameterType="Long">
        SELECT *
        FROM ontrack_task
        WHERE project_id = #{projectId}
        AND deletedBy IS NOT NULL
        AND deletedAt > date_sub(curdate(), interval 7 day)
    </select>

    <select id="getAssigneeList" resultType="TaskAssignment">
        SELECT task_id, nickname, member_id
        FROM task_assignment
        WHERE task_id = #{taskId}
    </select>

    <select id="findTaskByMemberId" resultType="OnTrackTask">
        SELECT t.id, t.task_title, t.task_status, t.task_dueDate, t.createdAt, t.updatedAt, t.project_id
        FROM ontrack_task t
        INNER JOIN task_assignment ta
        ON ta.task_id = t.id
        WHERE member_id = #{memberId}
    </select>

    <select id="getAssigneeView" resultType="TaskAndAssignee">
        SELECT t.id, t.task_title, t.task_status, t.task_dueDate, count(task_id) assigneeNum
        FROM task_assignment ta
        INNER JOIN (SELECT * FROM ontrack_task WHERE deletedBy IS NULL) t
        ON ta.task_id = t.id
        WHERE ta.task_id in (SELECT task_id FROM task_assignment WHERE member_id = #{memberId})
        GROUP BY t.id
        ORDER BY t.task_status
    </select>

    <select id="getNoAssigneeTask" resultType="TaskAndAssignee">
        SELECT id, task_title, task_status, task_dueDate, author_mid, author_name, createdAt, task_priority
        FROM ontrack_task
        WHERE project_id = #{projectId}
        AND id NOT IN (SELECT task_id FROM task_assignment WHERE project_id = #{projectId})
        AND deletedBy IS NULL
    </select>

    <select id="getStatusView" parameterType="TaskAndAssignee" resultType="TaskAndAssignee">
        SELECT t.id, t.task_title, t.author_mid, t.author_name, t.task_status, t.task_dueDate
        , GROUP_CONCAT(ta.member_id ORDER BY ta.member_id SEPARATOR ',') assigneeMid
        , GROUP_CONCAT(ta.nickname ORDER BY ta.member_id SEPARATOR ',') assigneeName
        FROM (SELECT * FROM ontrack_task WHERE deletedBy IS NULL) t
        LEFT OUTER JOIN task_assignment ta
        ON ta.task_id = t.id
        WHERE t.task_status = #{taskStatus}
        AND t.project_id = #{projectId}
        GROUP BY t.id
    </select>

    <select id="getTaskComment" resultType="TaskComment">
        SELECT id, task_id, author_mid, author_name, type, comment, createdAt, modifiedAt, blockedBy
        FROM task_comment
        WHERE task_id = #{taskId}
        ORDER BY createdAt DESC;
    </select>

    <select id="getTaskHistory" resultType="TaskHistory">
        SELECT th.modItem, th.modType, th.modContent, th.updatedAt, pm.nickname as executorName
        FROM task_history th
        INNER JOIN project_member pm
        ON th.updatedBy = pm.id
        WHERE th.task_id = #{taskId}
        ORDER BY th.id DESC
    </select>

    <select id="getTaskFile" resultType="TaskFile">
        SELECT tf.id, tf.file_origName, tf.file_newName, tf.file_type, tf.file_size, pm.id as memberId, pm.nickname as uploaderName, tf.createdAt, tf.deletedBy
        FROM task_file tf
        INNER JOIN project_member pm
        ON tf.member_id = pm.id
        WHERE tf.task_id = #{taskId}
        ORDER BY tf.createdAt DESC;
    </select>

    <select id="findFileById" parameterType="Long" resultType="TaskFile">
        SELECT *
        FROM task_file
        WHERE id = #{fileId}
    </select>

    <select id="findCommentById" parameterType="Long" resultType="TaskComment">
        SELECT *
        FROM task_comment
        WHERE id = #{id}
    </select>

    <select id="cntAssigneeByTaskId" parameterType="Long" resultType="Integer">
        SELECT count(task_id)
        FROM task_assignment
        WHERE task_id = #{taskId}
        GROUP BY task_id;
    </select>


    <select id="chkAssigned" parameterType="TaskAssignment" resultType="Long">
        SELECT task_id
        FROM task_assignment
        WHERE task_id = #{taskId}
        AND member_id = #{memberId}
    </select>

    <select id="getCheckComment" parameterType="CheckComment" resultType="CheckComment">
        SELECT  *
        FROM check_comment
        WHERE comment_id = #{commentId}
        AND member_id = #{memberId}
    </select>

    <select id="findUnCheckedCommentByUserId" parameterType="Long" resultType="CheckComment">
        SELECT *
        FROM check_comment
        WHERE user_id = #{userId}
        AND checked = false
    </select>

    <select id="findUncheckedCommentByCommentId" parameterType="Long" resultType="CheckComment">
        SELECT *
        FROM check_comment
        WHERE comment_id = #{commentId}
        AND checked = false
    </select>

    <select id="getAllMyTasks" parameterType="Long" resultType="MyTask">
        SELECT t.id as taskId, t.task_title, t.task_status, t.task_dueDate, t.createdAt, t.updatedAt, t.project_id, ta.member_id
        FROM ontrack_task t
        INNER JOIN task_assignment ta
        ON ta.task_id = t.id
        WHERE member_id in (SELECT id FROM project_member WHERE user_id = #{userId})
        order by updatedAt desc;
    </select>

    <select id="getBin" parameterType="Long" resultType="BinResponse">
        SELECT t.id as taskId, t.project_id, t.task_title, t.author_mid, t.deletedAt, t.deletedBy
        FROM ontrack_task t
        INNER JOIN (SELECT id FROM ontrack_task WHERE deletedAt > date_sub(curdate(), interval 7 day)) tt
        ON t.id = tt.id
        WHERE t.author_mid = #{memberId}
        OR t.id in (SELECT task_id FROM task_assignment WHERE member_id = #{memberId})
    </select>

    <update id="editTaskTitle" parameterType="TaskEditRequest">
        UPDATE ontrack_task
        SET task_title = #{title}
        , updatedAt = #{updatedAt}
        , updatedBy = #{updatedBy}
        WHERE id = #{taskId}
    </update>

    <update id="editTaskStatus" parameterType="TaskEditRequest">
        UPDATE ontrack_task
        SET task_status = #{status}
        , updatedAt = #{updatedAt}
        , updatedBy = #{updatedBy}
        WHERE id = #{taskId}
    </update>

    <update id="editTaskDueDate" parameterType="TaskEditRequest">
        UPDATE ontrack_task
        SET task_dueDate = #{dueDate}
        , updatedAt = #{updatedAt}
        , updatedBy = #{updatedBy}
        WHERE id = #{taskId}
    </update>

    <update id="editTaskComment" parameterType="TaskComment">
        UPDATE task_comment
        SET comment = #{comment}
        , modifiedAt = #{modifiedAt}
        WHERE id = #{id}
    </update>

    <update id="blockComment" parameterType="TaskDetailRequest">
        UPDATE task_comment
        SET blockedBy = #{blockedBy}
        , blockedAt = #{blockedAt}
        WHERE id = #{commentId}
    </update>

    <update id="deleteFileByAdmin" parameterType="TaskFile">
        UPDATE task_file
        SET file_newName = ""
        , file_path = ""
        , deletedBy = #{deletedBy}
        , deletedAt = #{deletedAt}
        WHERE id = #{id}
    </update>

    <update id="taskSwitchBin" parameterType="OnTrackTask">
        UPDATE ontrack_task
        SET deletedBy = #{deletedBy}
        , deletedAt = #{deletedAt}
        WHERE id = #{id}
    </update>

    <delete id="delAssignee" parameterType="TaskAssignment">
        DELETE
        FROM task_assignment
        WHERE task_id = #{taskId}
        AND member_id = #{memberId}
    </delete>

    <delete id="delFile" parameterType="Long">
        DELETE
        FROM task_file
        WHERE id = #{fileId}
    </delete>

    <delete id="delComment" parameterType="Long">
        DELETE
        FROM task_comment
        WHERE id = #{id}
    </delete>

    <delete id="delTask" parameterType="Long">
        DELETE
        FROM ontrack_task
        WHERE id = #{id}
    </delete>

</mapper>